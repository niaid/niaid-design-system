{% embed "@molecules/components/component-scrollspy-section/_component-scrollspy-section-main.twig" with
    {
        "component_scrollspy_section_id": "section-atomic-design"
    }
%}
    {% block component_scrollspy_section_content %}
        <h2>Atomic Design</h2>
        <p>NDS employs the use of a development philosophy known as Atomic Design. Under this system, web components are broken up into their simplest parts, like colors, fonts, and button styles. These basic building blocks of design are referred to as Atoms. Atoms combine to create Molecules, which are more complex web structures. Examples of Molecules include teaser cards, input groups, and simple navigation structures. Finally, Molecules come together to create yet another level of complex web structures, such as website headers and footers. These structures are called Organisms, and are typically the most complex components. The following video provides a useful visualization for how these structures combine together.</p>
        {% embed "@nds/02-molecules/components/component-media/_component-media-main.twig" with
            {
                "component_media_credit": '<a href="https://patternlab.io/">Pattern Lab</a>',
                "component_media_caption": "Atomic Design explained.",
                "component_media_lightbox": "yes"
            }
        %}
            {% block component_media %}
                {% include "@nds/01-atoms/media/media-video/_media-video-main.twig" with
                    {
                        "media_video_src_mp4": "atomic-design.mp4",
                        "media_video_is_relative": "true",
                        "media_video_attributes": 'playsinline="" muted=""'
                    }
                %}
            {% endblock %}
        {% endembed %}
        <p>NDS focuses primarily on the first three levels of Atomic structure (Atoms, Molecules, &amp; Organisms), due to its focus on <a href="#section-drupal">integrating with Drupal.</a> If Drupal is not used, further Atomic levels, such as Templates and Pages, can be leveraged to create static HTML sites.
        <h3>Benefits of Atomic Design</h3>
        <p>There are many benefits to Atomic Design, including:</p>
        <ol>
            <li>Efficient code manipulation</li>
            <li>Modular components that can be reused</li>
            <li>Better organization of component files</li>
        </ol>
        <h4>1. Efficient code manipulation</h4>
        <p>Perhaps the most significant benefit of Atomic Design is the speed at which changes can be made to design components. Since web components or patterns are composed of other smaller components, changes need only happen in one place. For example, if a designer wanted to change the color of a button, and that button pattern is referenced in a featured content card molecule, the developer can change the color of the button at the Atom level, and any references to that pattern will be updated automatically.</p>
        {% include "@nds/02-molecules/components/component-media/_component-media-main.twig" with
            {
                "component_media_src": 'atomic-design.png',
                "component_media_alt": 'Refer to the caption for explaination',
                "component_media_credit": 'NIAID',
                "component_media_caption": "This diagram explains how updating properties of Design System components propogate throughout the entire system. Updating the color of a button pattern will update the color in all patterns where that button is included.",
                "component_media_lightbox": "yes"
            }
        %}
        <h4>2. Modular components that can be reused</h4>
        <p>Pattern Libraries of Design Systems cut down on development time by allowing components to be shared and reused across an unlimited number of web properties. NDS is constantly evolving and growing by incorporating new patterns into its component library.</p>
        <h4>3. Better organization of component files</h4>
        <p>Under Atomic Design, the various assets needed for a component, such as component-specific CSS, JS, and HTML, are packaged together in folders. This makes it easy to find the code that makes up a certain component, saving time during the development process. Furthermore, this organization makes it easier to share components with other projects.</p>
    {% endblock %}
{% endembed %}